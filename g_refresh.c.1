#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "gulib.h"
#include "keyc.h"

chpair *saved_scr, *visible_scr;
int updated_scr;
static int x, y;
static char color_pairs[64];
struct acs_type acs;

void gulib_init_sem(void);
void gulib_deinit_sem(void);
void gulib_sem(int set);

int gulib_init(void)
{
	char *p;
	int i;

	if (saved_scr && visible_scr) return 1;
	if (graph(&x, &y, NULL)) {
		x=25;
		y=80;
	}
	saved_scr = calloc(x*y, sizeof(*saved_scr));
	visible_scr = calloc(x*y, sizeof(*saved_scr));
	for (i=0; i<x*y; i++)
		saved_scr[i].ch = visible_scr[i].ch = ' ';
	initscr();
	cbreak();
	noecho();
	nonl();
	// raw();
#ifdef KEY_MOUSE
	intrflush(stdscr, FALSE);
#endif
	if (has_colors()) {
		start_color();
		// fprintf(stderr, "Has colors, color pairs %d\n", COLOR_PAIRS);
		// sleep(4);
		assume_default_colors(0, 0);
	}
	keypad(stdscr, TRUE);
//#ifdef KEY_MOUSE
	meta(stdscr, TRUE);
//#endif
	p=getenv("FRAMES");
	if (p && strcmp(p, "KOI8")==0) {
		acs.tl=0xa5; // '╔';
		acs.tr=0xa8; // '╗';
		acs.bl=0xab; // '╚';
		acs.br=0xae; // '╝';
		acs.ver=0xa1; // '║';
		acs.hor=0xa0; // '═';
		acs.bar0=0x8d; // '█';
		acs.bar1=0x92; // '▓';
		acs.bar2=0x91; // '▒';
		acs.bar3=0x90; // '░';
		acs.up='^';
		acs.down='v';
	}
#if 0
	else if (p && strcmp(p, "UTF8")==0) {
		...
	}
	else if (p && strcmp(p, "ALT")==0) { /* OS2 or Linux */
		...
	}
#endif
	else { /* VT100 */
		acs.tl=ACS_ULCORNER;
		acs.tr=ACS_URCORNER;
		acs.bl=ACS_LLCORNER;
		acs.br=ACS_LRCORNER;
		acs.ver=ACS_VLINE;
		acs.hor=ACS_HLINE;
		acs.bar0=ACS_BLOCK;
		acs.bar1=ACS_BOARD;
		acs.bar2=ACS_BOARD;
		acs.bar3=ACS_CKBOARD;
		acs.up=ACS_UARROW;
		acs.down=ACS_DARROW;
	}
#if 1
	acs.bar0 = (0xff00 | ' ');
#endif
#ifdef WITH_PTHREAD_MUTEX
	gulib_init_sem();
#endif
	return 0;
}

int gulib_deinit(void)
{
	all_remenu();
	endwin();
#ifdef WITH_PTHREAD_MUTEX
	gulib_deinit_sem();
#endif
	return 0;
}

int g_refresh(void)
{
	int i, j;
	int cur_x, cur_y, curcol, att, ch;
	short col;

	if (!updated_scr) return 0;
#ifdef WITH_PTHREAD_MUTEX
	gulib_sem(1);
#endif
	cur_x = cur_y = -1;
	curcol = 0;
	for (i=0; i<x; i++) {
		for (j=0; j<y; j++) {
			if (i == x-1 && j == y-1) break;
			if (memcmp(saved_scr+i*y+j, visible_scr+i*y+j, sizeof(chpair)) == 0) {
				continue;
			}
			if (cur_x != i || cur_y !=j) {
				move(i, j);
			}
			att = saved_scr[i*y+j].att;
			ch = saved_scr[i*y+j].ch;
			if (ch == acs.bar0 && acs.bar0 == (0xff00 | ' ')) {
				ch = ' ';
				att = ((att & 0xf) << 4) | ((att & 0xf0) >> 4) | ((att & very) ? blim : 0) | ((att & blim) ? very : 0);
			}

			col = ((att & 0x70)>>1) | (att & 0x7);
			if (!color_pairs[col])
				init_pair(col, col & 0x7, (col>>3) & 0x7);
			if (att != curcol) {
#if 0
				int normed;
				normed = 0;
				if ((att & (curcol & (very | blim))) != (curcol & (very | blim))) {
					normed = 1;
					attrset(A_NORMAL);
				}
				if ((att & very) && (!(curcol & very) || normed))
					attrset(A_BOLD);
				if ((att & blim) && (!(curcol & blim) || normed))
					attrset(A_BLINK);
				//attrset(COLOR_PAIR(col));
				attrset(COLOR_PAIR(col) | (att & (very|blim)));
#else
				attrset(COLOR_PAIR(col) | (att & (very|blim)));
#endif
				curcol = att;
				//refresh();
			}
#if 1
			/* оператор подергивания в C: --i++ */
			if (ch == visible_scr[i*y+j].ch && (ch != ' ')) { /* FIXME: why not ' '? MB compare colors? */
				addch(ch == ' ' ? '_' : ' ');
				move(curx(), cury());
				refresh();
				move(i, j);
			}
#endif
			addch(ch);
			cur_y++;
		}
#if 0
		if (i<x-1) {
			refresh();
			putchar('\n');
			fflush(stdout);
			cur_x++;
		}
#endif
	}
	memcpy(visible_scr, saved_scr, x*y*sizeof(*visible_scr));
	move(curx(), cury());
	refresh();
#ifdef WITH_PTHREAD_MUTEX
	gulib_sem(0);
#endif
	return 0;
}

